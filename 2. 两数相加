 /*我的代码*/
 
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        int carry = 0;
        ListNode *p1 = l1, *p2 = l2, *p, *T, *tail;
        T = p = tail = new ListNode;
        //T = p = tail = (ListNode*)malloc(sizeof(ListNode));
        T->val = (p1->val+p2->val)%10;
        T->next = nullptr;
        carry = (p1->val+p2->val)/10;
        p1 = p1->next;
        p2 = p2->next;
        while(p1!=nullptr||p2!=nullptr){
            p = new ListNode;
            //p = (ListNode*)malloc(sizeof(ListNode));
            if(p1!=nullptr&&p2!=nullptr){
                p->val = (p1->val+p2->val+carry)%10;
                p->next = nullptr;
                carry = (p1->val+p2->val+carry)/10;
                tail->next = p;
                p1 = p1->next;
                p2 = p2->next;
                tail = tail->next;
            }
            else if(p1==nullptr&&p2!=nullptr){
                p->val = (p2->val+carry)%10;
                p->next = nullptr;
                carry = (p2->val+carry)/10;
                tail->next = p;
                p2 = p2->next;
                tail = tail->next;
            }
            else if(p1!=nullptr&&p2==nullptr){
                p->val = (p1->val+carry)%10;
                p->next = nullptr;
                carry = (p1->val+carry)/10;
                tail->next = p;
                p1 = p1->next;
                tail = tail->next;
            }
        }
        
        if (carry == 1) {
            p = new ListNode;
            p->val = 1;
            p->next = nullptr;
            tail->next = p;
            tail = tail->next;
        }
    return T;
    }
};

/*官方代码*/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head = nullptr, *tail = nullptr;
        int carry = 0;
        while (l1 || l2) {
            int n1 = l1 ? l1->val: 0;
            int n2 = l2 ? l2->val: 0;
            int sum = n1 + n2 + carry;
            if (!head) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail->next = new ListNode(sum % 10);
                tail = tail->next;
            }
            carry = sum / 10;
            if (l1) {
                l1 = l1->next;
            }
            if (l2) {
                l2 = l2->next;
            }
        }
        if (carry > 0) {
            tail->next = new ListNode(carry);
        }
        return head;
    }
};
